//==========================================================
// POWER APPS CANVAS APP QUERIES
//==========================================================

// Query 1: Track Canvas App Usage
// Helps identify how often your apps are being used
customEvents
| where cloud_RoleName == "PowerApps"
| where name == "AppLaunch" 
| extend appName = tostring(customDimensions.appName)
| extend userId = tostring(customDimensions.userId)
| summarize LaunchCount=count() by appName, userId, bin(timestamp, 1d)
| order by timestamp desc, LaunchCount desc

// Query 2: Canvas App Screen Navigation Patterns
// Helps identify the most common user paths through your app
customEvents
| where cloud_RoleName == "PowerApps"
| where name == "ScreenView" 
| extend appName = tostring(customDimensions.appName)
| extend screenName = tostring(customDimensions.screenName)
| summarize screenViewCount=count() by appName, screenName
| order by screenViewCount desc

// Query 3: Canvas App Performance by Screen
// Identify screens that take longest to load
customEvents
| where cloud_RoleName == "PowerApps"
| where name == "ScreenView" 
| extend appName = tostring(customDimensions.appName)
| extend screenName = tostring(customDimensions.screenName)
| extend loadTime = todouble(customDimensions.loadTime)
| summarize avgLoadTime=avg(loadTime), p95LoadTime=percentile(loadTime, 95), count() by appName, screenName
| order by avgLoadTime desc

// Query 4: Most Common Errors in Canvas Apps
// Identify which errors occur most frequently
exceptions
| where cloud_RoleName == "PowerApps"
| extend appName = tostring(customDimensions.appName)
| extend screenName = tostring(customDimensions.screenName)
| extend errorMessage = tostring(customDimensions.errorMessage)
| summarize errorCount=count() by appName, screenName, errorMessage
| order by errorCount desc

// Query 5: User Activity Heatmap by Hour
// Shows when your apps are most heavily used
customEvents
| where cloud_RoleName == "PowerApps"
| where name in ("AppLaunch", "ScreenView")
| extend hour = datetime_part("Hour", timestamp)
| extend dayOfWeek = dayofweek(timestamp)
| summarize count() by hour, dayOfWeek
| order by dayOfWeek asc, hour asc
| render heatmap 

// Query 6: Custom Trace Events Analysis
// Track custom business events in your app
customEvents
| where cloud_RoleName == "PowerApps"
| where name startswith "Trace:"
| extend traceType = substring(name, 6)
| extend appName = tostring(customDimensions.appName)
| extend severity = tostring(customDimensions.severityLevel)
| extend additionalProperties = customDimensions
| summarize count() by appName, traceType, severity
| order by count_ desc

// Query 7: Session Analysis
// Understand user session length and engagement
customEvents
| where cloud_RoleName == "PowerApps"
| where name in ("AppLaunch", "AppExit") 
| extend appName = tostring(customDimensions.appName)
| extend userId = tostring(customDimensions.userId)
| extend sessionId = tostring(customDimensions.sessionId)
| order by sessionId, timestamp asc
| project timestamp, name, appName, userId, sessionId

//==========================================================
// POWER APPS MODEL-DRIVEN APP QUERIES
//==========================================================

// Query 1: Model-Driven App Form Load Performance
// Track form load times by entity type
customEvents
| where name == "FormLoaded"
| extend entityName = tostring(customDimensions.entityName)
| extend formType = tostring(customDimensions.formType)
| extend loadTime = todouble(customDimensions.loadTime)
| summarize avgLoadTime=avg(loadTime), p95LoadTime=percentile(loadTime, 95), count() by entityName, formType
| order by avgLoadTime desc

// Query 2: Model-Driven App Field Changes
// Track which fields are most frequently modified
customEvents
| where name == "FieldChanged"
| extend entityName = tostring(customDimensions.entityName)
| extend fieldName = tostring(customDimensions.fieldName)
| summarize changeCount=count() by entityName, fieldName
| order by changeCount desc

// Query 3: Business Process Flow Stage Transitions
// See how users move through your business processes
customEvents
| where name == "BPFStageChanged"
| extend processName = tostring(customDimensions.processName)
| extend oldStage = tostring(customDimensions.previousStage)
| extend newStage = tostring(customDimensions.stageName)
| summarize transitionCount=count() by processName, oldStage, newStage
| order by processName asc, transitionCount desc

// Query 4: Model-Driven App Ribbon Button Usage
// Track which ribbon buttons are used most frequently
customEvents
| where name == "RibbonButtonClicked"
| extend entityName = tostring(customDimensions.entityName)
| extend buttonName = tostring(customDimensions.buttonName)
| summarize clickCount=count() by entityName, buttonName
| order by clickCount desc

// Query 5: Form Save Success Rate
// Track success rate of form saves
customEvents
| where name == "FormSave"
| extend entityName = tostring(customDimensions.entityName)
| extend success = tobool(customDimensions.success)
| extend saveMode = tostring(customDimensions.saveMode)
| summarize totalSaves=count(), successfulSaves=countif(success == true) by entityName, saveMode
| extend successRate = (successfulSaves * 100.0) / totalSaves
| order by totalSaves desc


//==========================================================
// POWER AUTOMATE FLOW QUERIES
//==========================================================

// Query 1: Flow Performance Analysis
// Analyze execution time and success rate by flow
customEvents
| where name == "FlowCompleted" or name == "FlowFailed"
| extend flowName = tostring(customDimensions.flowName)
| extend environment = tostring(customDimensions.environment)
| extend success = name == "FlowCompleted"
| extend duration = iif(success, todouble(customDimensions.duration), 0)
| summarize 
    totalRuns=count(), 
    successfulRuns=countif(success), 
    avgDuration=avgif(duration, success), 
    p95Duration=percentileif(duration, 95, success)
    by flowName, environment
| extend successRate = (successfulRuns * 100.0) / totalRuns
| order by totalRuns desc

// Query 2: Flow Failure Analysis
// Identify common flow failure reasons
customEvents
| where name == "FlowFailed"
| extend flowName = tostring(customDimensions.flowName)
| extend errorMessage = tostring(customDimensions.errorMessage)
| extend errorLocation = tostring(customDimensions.errorLocation)
| summarize errorCount=count() by flowName, errorMessage, errorLocation
| order by errorCount desc

// Query 3: Flow Trigger Analysis
// See which triggers initiate your flows
customEvents
| where name == "FlowStarted"
| extend flowName = tostring(customDimensions.flowName)
| extend triggerType = tostring(customDimensions.trigger)
| summarize triggerCount=count() by flowName, triggerType
| order by triggerCount desc

// Query 4: External System Dependencies
// Track performance of external system calls
customEvents
| where name == "DependencyTrack"
| extend flowName = tostring(customDimensions.flowName)
| extend dependencyType = tostring(customDimensions.dependencyType)
| extend target = tostring(customDimensions.target)
| extend success = tobool(customDimensions.success)
| extend duration = todouble(customDimensions.duration)
| summarize 
    callCount=count(),
    successCount=countif(success),
    avgDuration=avg(duration),
    p95Duration=percentile(duration, 95)
    by flowName, dependencyType, target
| extend successRate = (successCount * 100.0) / callCount
| order by callCount desc

// Query 5: Flow Usage Trends
// Track flow execution trends over time
customEvents
| where name == "FlowStarted"
| summarize flowCount=count() by bin(timestamp, 1h)
| render timechart


//==========================================================
// DATAVERSE SPECIFIC QUERIES
//==========================================================

// Query 1: Dataverse Operation Performance
// Track performance of Dataverse operations
customEvents
| where name == "DataverseOperation"
| extend operation = tostring(customDimensions.operation)  // Create, Retrieve, Update, Delete, RetrieveMultiple
| extend entityName = tostring(customDimensions.entityName)
| extend duration = todouble(customDimensions.duration)
| summarize 
    operationCount=count(),
    avgDuration=avg(duration),
    p95Duration=percentile(duration, 95)
    by operation, entityName
| order by operationCount desc

// Query 2: Dataverse Query Performance
// Identify slow queries in your Dataverse environment
customEvents
| where name == "DataverseQuery"
| extend entityName = tostring(customDimensions.entityName)
| extend queryType = tostring(customDimensions.queryType)
| extend recordCount = toint(customDimensions.recordCount)
| extend duration = todouble(customDimensions.duration)
| summarize 
    queryCount=count(),
    avgDuration=avg(duration),
    p95Duration=percentile(duration, 95),
    avgRecordCount=avg(recordCount)
    by entityName, queryType
| order by p95Duration desc

// Query 3: Dataverse Error Analysis
// Track and analyze Dataverse errors
customEvents
| where name == "DataverseError"
| extend entityName = tostring(customDimensions.entityName)
| extend operation = tostring(customDimensions.operation)
| extend errorCode = tostring(customDimensions.errorCode)
| extend errorMessage = tostring(customDimensions.errorMessage)
| summarize errorCount=count() by entityName, operation, errorCode, errorMessage
| order by errorCount desc

// Query 4: Plugin Performance Analysis
// Track custom plugin performance in Dataverse
customEvents
| where name == "PluginExecution"
| extend pluginName = tostring(customDimensions.pluginName)
| extend entityName = tostring(customDimensions.entityName)
| extend message = tostring(customDimensions.message)
| extend stage = tostring(customDimensions.stage)
| extend duration = todouble(customDimensions.duration)
| extend success = tobool(customDimensions.success)
| summarize 
    executionCount=count(),
    successCount=countif(success),
    avgDuration=avg(duration),
    p95Duration=percentile(duration, 95)
    by pluginName, entityName, message, stage
| extend successRate = (successCount * 100.0) / executionCount
| order by avgDuration desc

// Query 5: Dataverse API Usage by Application
// See which applications are using your Dataverse environment
customEvents
| where name == "DataverseOperation"
| extend appName = tostring(customDimensions.applicationName)
| extend operation = tostring(customDimensions.operation)
| extend entityName = tostring(customDimensions.entityName)
| summarize operationCount=count() by appName, operation, entityName
| order by operationCount desc


//==========================================================
// CROSS-PLATFORM INTEGRATION QUERIES
//==========================================================

// Query 1: End-to-End Business Process Performance
// Track performance across multiple components
customEvents
| where timestamp > ago(7d)
| where name in ("BusinessProcessStarted", "BusinessProcessStep", "BusinessProcessCompleted")
| extend processName = tostring(customDimensions.processName)
| extend processId = tostring(customDimensions.processId)
| extend stepName = tostring(customDimensions.stepName)
| extend component = tostring(customDimensions.component)  // PowerApp, Flow, CustomConnector, etc.
| extend duration = todouble(customDimensions.duration)
| order by processId asc, timestamp asc
| project timestamp, name, processName, processId, stepName, component, duration

// Query 2: Error Distribution Across Platform Components
// See which components generate the most errors
union customEvents, exceptions
| where timestamp > ago(7d)
| where name in ("AppError", "FlowFailed", "ConnectorError", "DataverseError", "PluginError")
| extend component = case(
    name == "AppError", "PowerApps",
    name == "FlowFailed", "PowerAutomate",
    name == "ConnectorError", "Connector",
    name == "DataverseError" or name == "PluginError", "Dataverse",
    "Unknown")
| extend errorType = tostring(customDimensions.errorType)
| extend errorMessage = tostring(customDimensions.errorMessage)
| summarize errorCount=count() by component, errorType
| order by errorCount desc

// Query 3: User Activity Across Platform Components
// Track how users interact with different components
customEvents
| where timestamp > ago(7d)
| where name in ("AppAction", "FlowTriggered", "DataverseOperation")
| extend userId = tostring(customDimensions.userId)
| extend component = case(
    name == "AppAction", "PowerApps",
    name == "FlowTriggered", "PowerAutomate",
    name == "DataverseOperation", "Dataverse",
    "Unknown")
| extend action = tostring(iif(
    name == "AppAction", customDimensions.actionName,
    name == "FlowTriggered", customDimensions.flowName,
    name == "DataverseOperation", strcat(customDimensions.operation, " ", customDimensions.entityName),
    "Unknown"))
| summarize actionCount=count() by userId, component, action
| order by userId asc, actionCount desc

//==========================================================
// SQL TO KQL TRANSLATION REFERENCE
//==========================================================

// This section provides guidance on translating common T-SQL queries to KQL format
// Reference: https://learn.microsoft.com/en-us/kusto/query/sql-cheat-sheet?view=microsoft-fabric

// Basic SELECT statement
// SQL:  SELECT * FROM Trips
// KQL:  Trips

// Top N records
// SQL:  SELECT TOP 10 * FROM Trips
// KQL:  Trips | take 10

// Filtering with WHERE
// SQL:  SELECT * FROM Trips WHERE TripDistance > 5
// KQL:  Trips | where TripDistance > 5

// Column selection
// SQL:  SELECT TripId, TripDistance FROM Trips
// KQL:  Trips | project TripId, TripDistance

// Ordering results
// SQL:  SELECT * FROM Trips ORDER BY TripDistance DESC
// KQL:  Trips | order by TripDistance desc

// Renaming columns
// SQL:  SELECT TripId, TripDistance AS Distance FROM Trips
// KQL:  Trips | project TripId, Distance = TripDistance

// Column calculation
// SQL:  SELECT TripId, TripDistance * 1.60934 AS DistanceInKm FROM Trips
// KQL:  Trips | project TripId, DistanceInKm = TripDistance * 1.60934

// JOIN operations
// SQL:  SELECT t.TripId, d.DriverName FROM Trips t JOIN Drivers d ON t.DriverId = d.DriverId
// KQL:  Trips | join Drivers on $left.DriverId == $right.DriverId | project TripId, DriverName

// LEFT JOIN operations
// SQL:  SELECT t.TripId, d.DriverName FROM Trips t LEFT JOIN Drivers d ON t.DriverId = d.DriverId
// KQL:  Trips | join kind=leftouter Drivers on $left.DriverId == $right.DriverId | project TripId, DriverName

// GROUP BY with COUNT
// SQL:  SELECT DriverId, COUNT(*) AS TripCount FROM Trips GROUP BY DriverId
// KQL:  Trips | summarize TripCount = count() by DriverId

// GROUP BY with multiple aggregations
// SQL:  SELECT DriverId, COUNT(*) AS TripCount, AVG(TripDistance) AS AvgDistance FROM Trips GROUP BY DriverId
// KQL:  Trips | summarize TripCount = count(), AvgDistance = avg(TripDistance) by DriverId

// HAVING clause
// SQL:  SELECT DriverId, COUNT(*) AS TripCount FROM Trips GROUP BY DriverId HAVING COUNT(*) > 5
// KQL:  Trips | summarize TripCount = count() by DriverId | where TripCount > 5

// Subquery
// SQL:  SELECT * FROM Trips WHERE TripDistance > (SELECT AVG(TripDistance) FROM Trips)
// KQL:  let avgDistance = toscalar(Trips | summarize avg(TripDistance));
//       Trips | where TripDistance > avgDistance

// Date functions
// SQL:  SELECT * FROM Trips WHERE CONVERT(date, StartTime) = '2019-01-01'
// KQL:  Trips | where startofday(StartTime) == datetime(2019-01-01)

// LIKE operator
// SQL:  SELECT * FROM Trips WHERE DriverName LIKE '%Smith%'
// KQL:  Trips | where DriverName has "Smith"

// IN operator
// SQL:  SELECT * FROM Trips WHERE DriverId IN (1, 2, 3)
// KQL:  Trips | where DriverId in (1, 2, 3)

// CASE statement
// SQL:  SELECT TripId, CASE WHEN TripDistance < 5 THEN 'Short' WHEN TripDistance < 10 THEN 'Medium' ELSE 'Long' END AS TripCategory FROM Trips
// KQL:  Trips | extend TripCategory = case(TripDistance < 5, "Short", TripDistance < 10, "Medium", "Long") | project TripId, TripCategory

// Common Table Expressions (CTE)
// SQL:  WITH LongTrips AS (SELECT * FROM Trips WHERE TripDistance > 10) SELECT * FROM LongTrips WHERE PassengerCount > 2
// KQL:  let LongTrips = Trips | where TripDistance > 10;
//       LongTrips | where PassengerCount > 2

// DISTINCT values
// SQL:  SELECT DISTINCT DriverId FROM Trips
// KQL:  Trips | distinct DriverId

// UNION
// SQL:  SELECT * FROM Trips2020 UNION SELECT * FROM Trips2021
// KQL:  Trips2020 | union Trips2021

// UNION ALL
// SQL:  SELECT * FROM Trips2020 UNION ALL SELECT * FROM Trips2021
// KQL:  Trips2020 | union kind=outer Trips2021

// Time-windowing (equivalent of SQL window functions)
// SQL:  SELECT TripId, TripDistance, AVG(TripDistance) OVER (PARTITION BY DriverId) AS AvgDriverDistance FROM Trips
// KQL:  Trips | extend AvgDriverDistance = avg(TripDistance) by DriverId | project TripId, TripDistance, AvgDriverDistance

// Common KQL Operators with no direct SQL equivalent

// Parse JSON data
// KQL:  Traces | extend parsedData = parse_json(Properties) | project parsedData.key

// Time-based bins for visualization
// KQL:  Trips | summarize count() by bin(StartTime, 1h) | render timechart

// Dynamic columns
// KQL:  customEvents | extend props = bag_pack("key1", val1, "key2", val2)

// String operations
// KQL:  Traces | where Message startswith "Error:" | extend ErrorCode = extract("Code: ([0-9]+)", 1, Message)

// Best Practices for KQL Performance
// 1. Filter early to reduce processed data volume
// 2. Use the 'project' operator to select only needed columns
// 3. Avoid using 'distinct' on high-cardinality columns
// 4. Prefer 'summarize' over 'distinct' when appropriate
// 5. Use 'let' statements to avoid repetitive computations
// 6. Consider time filtering first in Application Insights queries
// 7. For joining large tables, place the smaller table on the right side
// 8. Use materialized views for frequently used complex queries